$date
	Wed Jun 14 16:51:02 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module stimulus $end
$var wire 1 ! zero $end
$var reg 1 " clock $end
$var reg 1 # reset $end
$scope module test_processor $end
$var wire 1 $ DE_regwrite $end
$var wire 32 % FD_Inst_Code [31:0] $end
$var wire 1 " clock $end
$var wire 1 # reset $end
$var wire 1 ! zero $end
$var wire 5 & rd [4:0] $end
$var wire 32 ' in2 [31:0] $end
$var wire 32 ( in1 [31:0] $end
$var wire 32 ) EM_Result [31:0] $end
$var wire 1 * DE_control $end
$scope module DECODE_mod $end
$var wire 32 + FD_Inst_Code [31:0] $end
$var wire 1 " clock $end
$var wire 1 , reset $end
$var wire 32 - in2 [31:0] $end
$var wire 32 . in1 [31:0] $end
$var reg 4 / DE_control [3:0] $end
$var reg 1 0 DE_regwrite $end
$var reg 3 1 funct3 [2:0] $end
$var reg 7 2 funct7 [6:0] $end
$var reg 7 3 opcode [6:0] $end
$var reg 5 4 rd [4:0] $end
$var reg 5 5 rs1 [4:0] $end
$var reg 5 6 rs2 [4:0] $end
$scope module reg_file_module $end
$var wire 1 " clock $end
$var wire 32 7 read_data1 [31:0] $end
$var wire 32 8 read_data2 [31:0] $end
$var wire 5 9 read_reg_num1 [4:0] $end
$var wire 5 : read_reg_num2 [4:0] $end
$var wire 1 , reset $end
$upscope $end
$upscope $end
$scope module EXECUTE_mod $end
$var wire 4 ; DE_control [3:0] $end
$var wire 32 < in1 [31:0] $end
$var wire 32 = in2 [31:0] $end
$var reg 32 > EM_Result [31:0] $end
$var reg 1 ! EM_zero_flag $end
$upscope $end
$scope module FETCH_mod $end
$var wire 32 ? FD_Inst_code [31:0] $end
$var wire 1 " clock $end
$var wire 1 # reset $end
$var wire 8 @ MD_Memory [7:0] $end
$var wire 1 A FD_Inst_Code $end
$var reg 32 B PC [31:0] $end
$scope module inst_mem $end
$var wire 32 C PC [31:0] $end
$var wire 1 " clock $end
$var wire 1 # reset $end
$var reg 8 D MD_Memory [7:0] $end
$upscope $end
$upscope $end
$scope module WRITEBACK_mod $end
$var wire 1 $ DE_regwrite $end
$var wire 32 E EM_Result [31:0] $end
$var wire 1 " clock $end
$var wire 5 F rd [4:0] $end
$var wire 1 # reset $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx F
bx E
bx D
b0 C
b0 B
xA
bx @
bz ?
bx >
bx =
bx <
b0x ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
x0
bx /
bx .
bx -
z,
bz +
x*
bx )
bx (
bx '
bx &
bz %
z$
1#
0"
0!
$end
#20
1A
b110011 @
b110011 D
bz &
bz 4
bz F
bz 6
bz :
bz 5
bz 9
bz 3
bz 2
bz 1
1"
#40
0"
#50
0#
#60
b100 B
b100 C
1"
#80
0"
#100
xA
b1000 B
b1000 C
b10110011 @
b10110011 D
1"
#120
0"
#140
b1100 B
b1100 C
b110011 @
b110011 D
1"
#160
0"
#180
b10000 B
b10000 C
b10110011 @
b10110011 D
1"
#200
0"
#220
b10100 B
b10100 C
b110011 @
b110011 D
1"
#240
0"
#260
b11000 B
b11000 C
b10110011 @
b10110011 D
1"
#280
0"
#300
b11100 B
b11100 C
b110011 @
b110011 D
1"
#320
0"
#340
b100000 B
b100000 C
b10110011 @
b10110011 D
1"
#360
0"
#380
b100100 B
b100100 C
bx @
bx D
1"
#400
0"
#420
b101000 B
b101000 C
1"
#440
0"
#460
b101100 B
b101100 C
1"
#480
0"
#500
b110000 B
b110000 C
1"
#520
0"
#540
b110100 B
b110100 C
1"
#560
0"
#580
b111000 B
b111000 C
1"
#600
0"
#620
b111100 B
b111100 C
1"
#640
0"
#660
b1000000 B
b1000000 C
1"
#680
0"
#700
b1000100 B
b1000100 C
1"
#720
0"
#740
b1001000 B
b1001000 C
1"
#760
0"
#780
b1001100 B
b1001100 C
1"
#800
0"
#820
b1010000 B
b1010000 C
1"
#840
0"
#860
b1010100 B
b1010100 C
1"
#880
0"
#900
b1011000 B
b1011000 C
1"
